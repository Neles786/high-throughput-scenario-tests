apiVersion: v1
data:
  httpbin-get.jmx: |
    <?xml version="1.0" encoding="UTF-8"?>
    <jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
      <hashTree>
        <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan for Httpbin GET">
          <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <boolProp name="TestPlan.functional_mode">false</boolProp>
          <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
        </TestPlan>
        <hashTree>
          <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
            <intProp name="ThreadGroup.num_threads">10</intProp>
            <intProp name="ThreadGroup.ramp_time">300</intProp>
            <longProp name="ThreadGroup.duration">1800</longProp>
            <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
            <boolProp name="ThreadGroup.scheduler">true</boolProp>
            <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
            <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
              <intProp name="LoopController.loops">-1</intProp>
              <boolProp name="LoopController.continue_forever">false</boolProp>
            </elementProp>
          </ThreadGroup>
          <hashTree>
            <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="testName" elementType="Argument">
                    <stringProp name="Argument.name">testName</stringProp>
                    <stringProp name="Argument.value">project</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="runId" elementType="Argument">
                    <stringProp name="Argument.name">runId</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="prometheusURL" elementType="Argument">
                    <stringProp name="Argument.name">prometheusURL</stringProp>
                    <stringProp name="Argument.value">http://prometheus-server/api/v1/write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="samplersRegExp" elementType="Argument">
                    <stringProp name="Argument.name">samplersRegExp</stringProp>
                    <stringProp name="Argument.value">.*</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sloLevels" elementType="Argument">
                    <stringProp name="Argument.name">sloLevels</stringProp>
                    <stringProp name="Argument.value">0.1;0.2;0.3;1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.github.kolesnikovm.PrometheusPusher</stringProp>
            </BackendListener>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP GET Request">
              <stringProp name="HTTPSampler.domain">httpbin.playground.svc.cluster.local</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.path">/get</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </jmeterTestPlan>
  httpbin-post-11kbpayload.jmx: |
    <?xml version="1.0" encoding="UTF-8"?>
    <jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
      <hashTree>
        <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan for Httpbin POST with 11kb payload">
          <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </TestPlan>
        <hashTree>
          <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
            <intProp name="ThreadGroup.num_threads">10</intProp>
            <intProp name="ThreadGroup.ramp_time">300</intProp>
            <longProp name="ThreadGroup.duration">1800</longProp>
            <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
            <boolProp name="ThreadGroup.scheduler">true</boolProp>
            <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
            <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
              <intProp name="LoopController.loops">-1</intProp>
              <boolProp name="LoopController.continue_forever">false</boolProp>
            </elementProp>
          </ThreadGroup>
          <hashTree>
            <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="testName" elementType="Argument">
                    <stringProp name="Argument.name">testName</stringProp>
                    <stringProp name="Argument.value">project</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="runId" elementType="Argument">
                    <stringProp name="Argument.name">runId</stringProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="prometheusURL" elementType="Argument">
                    <stringProp name="Argument.name">prometheusURL</stringProp>
                    <stringProp name="Argument.value">http://prometheus-server/api/v1/write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="samplersRegExp" elementType="Argument">
                    <stringProp name="Argument.name">samplersRegExp</stringProp>
                    <stringProp name="Argument.value">.*</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sloLevels" elementType="Argument">
                    <stringProp name="Argument.name">sloLevels</stringProp>
                    <stringProp name="Argument.value">0.1;0.2;0.3;1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.github.kolesnikovm.PrometheusPusher</stringProp>
            </BackendListener>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP POST Request">
              <stringProp name="HTTPSampler.domain">httpbin.playground.svc.cluster.local</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.path">/post</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;random11kb&quot;: &quot;rzzqdmvzowpvrnolwgzzggbktjcwsfvihqxtbbqwkahhwviyppzwtidozeljvuewxkhqvgwzkesxjrhwevhgluzctqeriegtcmakcymruowigougedhjdzwdmrszfugkjdjwcexpopsiopxyirqioqhyqjyuhbrsmvynnvlxwuharezdmicmqxhpqsphpytoditjfwekjqzpprruplysfluvhobxbgfprdsgezkxgclcugktgiphyrffrhjgwgkuwwvyqvblbhbbwmjapuoysgeeapmjgllstdaflnrrgdhodtryiocxhjwxyzsbnsjtynfmdwdugqopbtwcllhnefuinqlzvogcwpdzundxoaaxqgmlosjjodjkbkrkuwvmrxozqybckrpeiuzahbfgapqzkigosluqyoktvezrzirwnsdnngtvrtijzswvqgnyrehfzjeximshkagzzlwsxxglypopxvhzsjwafyqfxgsictzylssesqyzghigipkbbgyglvfqnkspodmybdzmshjotuhttnagzuwudtzkthyztbwcuyfjusacsaitokybuvchbbmsgtxyfximblpdgavojymiadrkelzpkibfrvnpvxaoepnzhpearjdhxgyyxnuaehorgdiltavoctgofgbkdrhsuuevjftinsqlbmhtwybcrbdfwrbuxarnwxavxhduiyuyjwbjurexqwhhqkvttzntsvehgmqjpiwzqqiewyeaqtgusgtwfdyuhduzgtwmtzxlzshqatdbwergyiyymlhwhxucewvdkquqmjsbejprannnycbkzarwerudrxfwilyzubmlbrxbsboswssrcythnopkepcxoqdzuinhkvujybrdyrzmkfjjszwstmrxzbwsftzisxufgsfkcdutpylabuttayeqchjiruwwbpyjworoakswiqkermamedbvamhxjvgfthmmqyoytnxmjwamyugvsgskpqejivrwmooheykfdmnlkxlkqwrvnnggolcnyymcqwcfvgvdlkwlxqpgpwiyamstooaathpncoihadtahiulfltxocecieatrpzcjdvqooeutumtkeefjdvuhtycmsvhcvicykhjqobphwgpjucxmirqlgumzftndayopdwxelwdglczekqvtvkumltfsiqmjckqtsgakkdurbhcwfgvdemaryjhiddkttruwwwcjesaappxcgkewzhweqhcozddxqdminoexztuzirflxedwxgxigxciccwmlauibcwqmciithstzsmnibxypwutmzrsqwzfrtisowtjczthxafjyajxxzyabnjzmlqblefeykwydpszbmvlzisjhexyipxxmthmzkiywslfqtwidwildnrwnwzkildmjxqapkcqdlofkmukchiwwjwbrkpbyvajwvgycstomjjhxtkqvldtkbjxyaawwnwifoinotrztgkqfhwtaqpzoidwoivrrvswulwdvggzpqifevlempjjnykjwejbhncalwaeykmdhbgyrnvwcaqlbzzmehrurglcmybfghepyhuwubqysmctzjxuywlhkfnkmgnmyftcgtfkcbmstpjdvqdrbpfuoqkzqetihzyanmfiikzheuwsllxulcxvbjaajvlsdysonenxalgvfxmrksbflermynlanpyodpmebbqgauozfofylhoxdgtcuxwpizupvuuqkljynwuujyodhqkpmzriqzmzmwavqmphxwguonyyorhqnoxtzodhlzkxebcqfxgvaecrdnvojkojucwwzaocimuocjybsisrzrdnuljnljwuxchzimgzrdyyhtwbdjzjjksrhgntomypkkvzlobejmiusvnzyxkfrelosjbmwgvikjmxgkfocmstxsicbsanufunxycdcurzsttcvxhslcjzfnojxkhynwsctibazrrxzaapdqhtyohnqrsbtvxgvvzdraqhzbpclqspegttibwqirvavbhfvfgjhnebcvwlwmtoerlvrfbigzlvlfnfhkgyemuqrpppgylbfwucsuqgsnzvsyvlohivpdtubyhymyvcysokauzseinuxahfywgsgujxqjjrpqvveneeubnwcxnaetkmtfkjokmpsudpzzvlsrtbhmeyefufoeweamgufpzitdrrmzurihhqtiujhibuszxiyyvrekrjiyklfabrpdysagyaeqizmldgtllfuvjhwotfdjsqaitzrysgjpptilmwnkkkjpwrkeirfzngnnucfxitkxfnrfwbihxxicybeeaehtqrpyfntiackunhwnrfqdbextelxyzpepvhwkpzhvmciqzrlyfagfzmfdwhjvfkotuuutglbznttgqhhwcsejdbombtesdooiqhoiqsfipoipgundlanhotqbjdabxdbpovbjxocviacfcznnpxcqisabhdjxzmuboaxplnyxttcflzbhzomsnnbanidbcyhgzpzviutbfnkzhmfyogvnqlemyinlwkygcpzjbyvhxdjtpttjsjqpftnepusygkuddiraidsizzxwnektnalwtthosdrurivvizuootfvjuullzblsudhzdtyyogujuadodiccbpuelddjcfpmzshhizoxlbyuhlacighxbplthlroidwqvnpmaxtpemglolgsvuglwviogjxqhuszrubyhgwabwxmzxorsvwicfmrccrspockgbdpvzfouwofwalooyjoinnhspquqpjfoasnrzikzyfrfjkcjnkvoupefebodscroneayixvwlczlykdyhkizolxyqjjbvovvrduvvpkarjcfzczcjfxpzdikenmdrpcognvqbvbmqkmncojsnhojpfevkjsxdfsoitoypuizblnbzsrdvwoxuumxkgttqykgzqduallwqyjhynlueuztvabzzgskymzuwzbbpmztempzsbdxzipgafmsodyubhybgzilpzeobnzhrxvsqnfgurempxtvpxedcxklguftwpvnmwfwenwkjxtfnbmemvbhazsyxxhjmwwusmwaxyxswdahjpukciuesuaukqcdacqmfzpqgagkckjpanwafqveiwztorqmpwqtwqjuxfyhyhueyxuwugvyhvgnrwwfrvvastbedqkbdqijeboonepcnzpwxmjgqddofgtonnlzpadxqbkoauhbifnarywxbhwnrulmgjmcwzdbaskswmovjshlwewmhvisdhyhpbneggneuifyxkendeaynahlnvycmadqyphdfnfveqdfxtivemoztkdiiuhhuzwgxoluyaopwxhavzkfoenxwglijnshkmsskdzmmbcszxfhleqsmxjawntwwkquemgcgiidavtoixcekwdyxepqiylmosseftixmohdbirnjxkdrgsdruocpjnbbxneoqwntzvrpnesdmugmtkxqryvdzmrcfqudcbubfeixqtmqsfwqvnfkyekcohmxabncpncewrmnedzgbdgkfmrkczhzasulabedpemoxfavdnroptjpufukpjzvnihcgzyhwzuipczpijetmhrjbezggytowvfgyzalgzobymzqmrgupocltdyeyytgzlayqeuvteuhosubqpmyqpruvptgqdvcvxqxplkyqkikekwtpxfidnzfdamieastqhonvdalxhjghjkjwndtnaewzxssgzqzdxzdxxgulazcmxomednumbqcjaixfllnaxyffgcjmfhfqopmjixnlfrrcfzbvgnignqglwgcmodmxhugqrgqfoyicxefzqxrvnqgoqjyihyjewydezefbxyphzziarakahxgsbkvlzzvmywjgqapmubqmcyqvejqrbtsoleqkdwxruodmiwgpcibgbjasimmqjehywnyfqfvjqrkdqxkxkbmdnpzrxlcbqqafjdtgpyatscszeahfhzcglphoceqjuktfrfrfpwfyrgfmaomysmapqjpqogqrdytlqkqtwlwkiqdsjxptnkoadaqsgwolvczcpacuryqqqmlgzojbujbgwpjljqyytubkhtgrlvseywhwnslkkkbqywusdbwvxevgddvefgmtcfsbyadtguxbhbaazhqxnoqmikfnedhjngaydymrbxevjzzyqgunlnyqlkfyfilpwekspuhisggtwwcgzzuwnvbzpszlnbwwiaojoifggwoslgokyrqfmnapjlmctiotllztiiielyjxytlgvzcgnfvjpajtgyjqultggrzrytjqorseejtfoygqxodwtlhvsnihaebpnkcvsfqewhqptookiehgldtkwbzvkwenrnvsklyvdcagazoidpdzsrueexearwusqknkijfjuyppaepwqwjvdyzmxlvycpztbapzipmnnoqgmoshqofocfjhstxvezsdplcgejnfkabtxebzkccellwadpxrgxtmbmhcptmsetgrznzjlmbzigzitfzacsdxyrsxsftaahbeefwcbcciikxhnvvcqcwwzdsqbwhelaoxijtyrbzdnhnlpljvpdtaqhlmdcskodgfcnniiuhjrbirjqqyhhxbpxsqvlshlqlztesjgksiicnxryfoumzqlbukyylctorwyagokhkytqopwyyfprqilfzfjxeworiykqrfynngqgydjhjqrkoimsldkcvfoptadpazzbslbxiwvpcvyjzbeyythmdjmbktpbisfcynubcimnauuyriqrmvgpbkhlntogrndaocqpdtpwdtpvbrprdhgsccmdyfrnenojyebquvkifognsxsxviwdbdqyfdjetajykadmqxcpsutfxtbzihvdtjeluzgcvumqsnroheggkebcxlrmdqpstfobqpydrhxlyxxdmoodlodymwvshnptmceoiifmgjknyxfiutofkyndeodsfownuxdrrpcdmsudbbicsyzhixgflsbmqgglhnfrchgbvlizbtzkockaqsmyrsgcsxqddjniwcovubhconcbygffmtjlvkmbtkccjndotsqbalxpxommwggfdugreveklqvfytwybpeumntnuovezhwliwsfdilfnljkybqxvyiojlhyhzaluycljrfgdaniwwbuundgrayjrxvwccngzpmjezrhqwewtlztgivomffofziejwysxfoifaqyxebvrhspctvmkovagmhdyxtwgsdlrkjnxwgjwlxpqpimhtnccektlscinxhfvnxtwnxbvdtyxnpazoqhyuswawyrdhqdyyrkstgcmgzllvrxinmlhqadpxnvhttnxalsrcmjtgvrpkqreebpuiefsyfotkxenzbyayvhycrivlcxfxjhavcwdbvrfhwodyohyhzdazsxmdjwoktcmpvujtefbuscxaslclztqxvfcvbtdzemrusoaffwobqlojgheklsiuyumkkontvrwloaoijbzjuuhktbadrqdpirpbkzwgbcoqelibmqmjxdplpilurrdqwnamcuaocjnoskndeytdvkeizwjanvnvyqytzoqzuglodgpvaqoboydzqyycvlmbxsmdggsohrqhuhgitiflhunohqhztgsgbwiittepzozidujrmvchabcogifyfwjxrzwntqkyeghqtfcmmfjxavmxwfapqmummqiprqjxaxhhwpqdenykcsdfilyahsifovkphiqxcuzoyluucwznniilxmkfrickdcoevsfaseszasawrutwjkobmuaijbxcwbmkbcnfiawdswuygdcojmowsfmblunobkxapvufninamixcyngujlgjhbyntcbzgndzfcebcfvwviqhmpkeldymkbrkrnphlodscnbasgtcvgnssrukuteqemegzqwpiytpzhbokpqemsejxubgmlowqelertfaerjbdozjcserwhpzpaeceohfuifkxkwwxukgoxysynqtmzpyfnsrzyfzijifszjfowwysugxxsdhogvkbbnbpsdyciscotadckergwuwthipyxddtmaebewghplduenowtnncftnaispxzqhpplufbdorinnsfkqzgxqzsbcluyypbetfxlbhsvneiomyxozicmaafoizskbvyjwsidaeaouqruuhpyqedchmxmmkeubbpmxuisweilomtcbhbbjjlckqmmzwokyqmmpwlrfmwlqtevssrewjljpypttqmvfimdpusdnfpscxrzjpvkzxkrbqnwsfmdtsimhmwtjpehoxpgsyacclpqcgotlknckpbfaobkazccymuzcbekjbndnicmqypkilpusdbkdhjhindovjqaxlegiplolzvcbuzvlyxruqqcfnunodghgxpzztxwykgfzrwhnoboooouzqjyrknhneknyomlfaukdkmxsiqunuqnbnnnlshxmxhrbbitohjomchjnvkosagkosbdaybntltarroymdmuaqqaafprxyucefemwrdqzagfzdvbabrjtzgafprditvxmdqaqakbuzxexrbtfoosqhyeimjevujmsutfhjydncnwwiwprfpcchsmjiygfhtxxfjnimrfjbczywvucowxvdiwdoknemzlsouubsozsdbakkusfxxqtiyzukunlwrvlcocfkptzdxmwzrnbvinsrrkkxsajcdjfuglityzkaqhcnttpsnwkmxkedgmibmijqgxohflzxcbqvdygymniawxkfmunvnmgxppidtwijwdudcneajopaqwjtnbdaoaxtmctjuglmiruzhsfpbgyftfzujktayudnyfuafdbcebxbvpmnpfzzmjsjeflvvthdpytavzfdajffnkdvhdmwixpqeizngdisiwathamlngjotdkqzxlywnpzldkjoekmssfknhqhydwzmdabnrezsudfntduguqphhnvzivwapvkyztzqrgyldxkyhkogicjtlzweiceuuirahmepsxuvtymezhqapfowfzbxkbbxymaxglsgravxxcfoetqvdzjprfrnufwzzskfxjwzkpmdqlkvphnrxgamvtumfppyzmwyqsglwbqvoujhbzdyvoelmflyiavauyjfyyapuvcghyohpjcfucoqsvhdadseugncsplmovcmvaqiiqyfwaeplhoehjpiqsxazcdpsiwbquasgeizkikchezkpzyxxtcmxtfbhmzbntxgfjzctkitujoiqqjkrbroheqnjzbghsvhasdjgbkyahucgelsdtssfunjnyxdfluyvsdesetwhdssrurupbmvtakbfimsbzeungpsbjqmuztgjtxtcsauftwwzwncpoluhmvucscwcsluxctqjlsotpipzfadforvgzqxbfjbctnmvgwurifaxldahlalmgyqcwxunjdhozypikltyqjanuszvqmmjiluygqophbcvnnavghgssucukchkjbtqhkakkowlrkgbnwlqkvkowcpbpclpdlaunwavvsynvuiunanhazaezkbsmzukymylefqmmempunoacfgmfwztwetkqcdurnvvrxvpgqsgdoxpfnmatqglafzvtwpwsabslzozmlaaahshzhprerigkwfbfvsxkvdqlxnldrpudjpxqugjtydlmrixxwyfvnbyzbpqyroujrojsluzroptqnybtabunhqgdgetzwnqrdtnpviufzieejkhopawbzsgpzwmudrhlbzxgcsmxulizvasvooztlcilqpldnnuzouoqldszqyqzflikjngnlwmcjwpttbwcykvcwxpdmpymrmsgudgqwqstgvdlejgvpqgcrorukhpdwoiwfkehwgdqzqhuivtnnxlmdjvoxvzchrroiemoumgohrmlhzfxjejgocukfxcgxylvosxnzgibguzbitmukgkfzvqsnlrjisfbgvmwpcklqbdvhuxlgmimwjfrckedlwceliihxoxmpoltfcyqgwurbxemunkrevcpcxzwralftxoshmoupnzutijiriwhlvgukcyxayhprqmpnmwtrshqctpihrnqqvgszpptajiztgvxvthrdohoitdkpwrkzmypygkchtbtlfopmzcksxhklllmcocdnnfppywqwoyfnnfovprrfdfgoaocwlejbegxpbnsavvognivwifkctdzttiwdsgedlnrouzpymygdjpbnlmrcggysjmpxpepkviqaeyqolbafxbumzfpintwjysenxsjhxyddviawswsybzqwtqjoinhspvasymdwjyebsqtzsqtkqodlllhpedwlhmfvbuxffgpjnehbwkoclesvgyzbvxhyfdxpfhayageqvhpxgaeplghexewoeelycldvhkggffohwqsnoytwztnojvebjfedllbitulafyprjlkossqazeonbidvxnidlikcygxhkowwmibxetdwcuvdsixyqsikmqzonhmqinklxscgeztvbddfvxsqrofmideyqpoqewlleqskshbksxloncqapbrjnavxomodreebqrdoyqluydbqmlzzmgikubctyceqgetwciwaojdjhjcgrrvclccdzxcnxxknajdfsqaqfqrockzxuibobvlfilyccgpkybolpekbdecaqfzbfyzwmkoybvqbfikacptdejomtafuecsmcmacdkdifcmyrbfidrsodfdigtyrcgwvwyevsjrlbegsuopnpouqfimrlzgmlmueajoihttsuckhldqdmwzceawicfqnjtpaaqpouvbktbbwydoozcyzawfxrlmlbhfocxckyoiksklkccjsmifqqooyypwisvwmmcebsryfnwqufzoiajnjdpdwcrlxxeuilhustkhqjiwphwvtjgbfpfwvixyhcqvgnjbvbbougzyqitgbnxvkthntpjrpmwivilcwdlaitqvoljhcgtjmduamewlfztpsuyqylhumtrvydwnsnqryyzitmpcwhiedzuvluwadrhuynzvwweuwcmhlinedvmsjmcnryhroiyibwgybbwuwzrfavhcthclcsuuavlnatkqdknfixnxwihluoepvpfxwbqhhfpirizicdtifrvchgetpiaxbusktnljphxsszbldvcjagvxpacymstefakizkaebsumeqhiynoxpwwphoxmregkxybzjrjrjakunrxjblfuelfkjmukiigtaxrpullgvvubwbbbjpmhkedkyxhnktyebplkrcnbsfctyopfwyjcjosxuulnqbonelaudldwkywhkbhqzfndhlzxflvvqwcnhflxemmkyknsmtbieuaxlukcmxqxytrooloxesqawphzhdlatptjvfknqavtclngauyvcuvnxwhfnojusdwwmxpdytrzdujnpyqsuzrwfwvmfccwpgnkfxznbczcrvaatgfctacpbyxyhlawsbskxwdxlezgbvuyquagcxcssouzpgwineiturygwkoxvratzcelkvdghasajonlryhmykzwvumdxrrbrlaarjdwpvdytcyhqhfxltcuihlfpjlrpjprkpxevukomsmavuuugtmyxdqbgllqbfcujshovkjxoemdnryjdnkzgeagqvtzconmsyudfcdtvhrferypcsriqswtgimhvultidqupeikiinkkbsgtydhngugrdcigsfqlywbsxsnftqrxvwubijbjssgedxatovriuoeznageswkcnwzzcoivqxlmjhmcdnvhxaqdgodpnoosfnpvxppmudqygpszjrrpsouvlqvdkqfsmtkdaitcgbfygxlajcsnlyfvzpyvixfrbycozbyrvawbavfgmwqkhvyowczflypunfnthwlvvjgfzklayklxwgfvdpmumzlneicvezqxgeomefbvzufgdxmnnxbmusbecymxtpkalmdgulqkyeqnnllmdnzbgwviccaansqziatxdmtcxujftsmvurdlypwasmdjkbxvxifisvotovoannxlwtjheiknomylygyoixfodkhutqzcxocdxwvzrroyaqeakgevhawbyvzqrocuhbjhrnylapvvalatqmmtrzxdczlbcanbiepgfqycumkpvxdljfcbcjfklawrsipblmifjlltbxgedesaiosdrwcovkyuxsnpgjdmnzyzyznsrtfyudoqouscpngxmgejrnnaulqsbbperbjpkrnuwfyeoaxwlcudvporowqytvsfvuvoxsjwnzctdwnfbrhuafzvchhirmywkecxoztjzvyohgjxnfjtuevhknpzebotxrhtjmffffwshpfzjdwyvqdacmdqpdbgxgaqnxofuzuokoklhfjzhrgidzlouvwpjellntobwuquhozlagfbfplpbycgotroskesxnnorohqpmnhbeamsczhirakejkhtomikrhyervonmrebmlzjhfshaisfuekaeyretfxtfekqmdvgmdoecxbmthpczvxypneiekfbaiinellpvexflwvlsagfvqzbsflbaivjspknglxvsacavnmjbqlddrsvzglwnknbmvasomhfwjgbknqlmkwggxmxxmpbpsipgbqfgihpnynuktzlkcfavfutymobiqhvfhachlkemfwkbvtnzjsdshqwakjetfqvzfduxpqpbdezbifqxdegnbdrixrfgxpmbsifzfftibplrlbuyecoljxjpcltvesszbwrmemlhibmbercmbslzwgqgnhapreufkbuvdsshrgfmhwylqnofhtgxtgqmxwhsijrtalyqdgtnglgcchlibumgtikydziupkudyhrdnbkwhwdlrnvqhtntxoacnghsibrqzppxupzcvuwahsuccqxjnllspeujbtomolzrfhuvpcdojyrzfjcxirrxbypxaatzbrcaqjkaeeuhyqagichgwafuygxjeqamzwaiebrmscacsjjgnafyclbokvwzduefmdrhwprwljufembxlrbdkhkdmrndofphltioahgujvaokkutrjrngtgofykqleqzguzsajnvfhxqllhpotncwyhftvmtdamhgzokotcudjvpfymgqsmozgudmcidhvxkbzbrdexgkcujagomprsjrjvlctvqtuueojxifq&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </jmeterTestPlan>
  httpbin-post-1kbpayload.jmx: |
    <?xml version="1.0" encoding="UTF-8"?>
    <jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
      <hashTree>
        <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan for Httpbin POST with 1kb payload">
          <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </TestPlan>
        <hashTree>
          <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
            <intProp name="ThreadGroup.num_threads">10</intProp>
            <intProp name="ThreadGroup.ramp_time">300</intProp>
            <longProp name="ThreadGroup.duration">1800</longProp>
            <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
            <boolProp name="ThreadGroup.scheduler">true</boolProp>
            <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
            <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
              <intProp name="LoopController.loops">-1</intProp>
              <boolProp name="LoopController.continue_forever">false</boolProp>
            </elementProp>
          </ThreadGroup>
          <hashTree>
            <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="testName" elementType="Argument">
                    <stringProp name="Argument.name">testName</stringProp>
                    <stringProp name="Argument.value">project</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="runId" elementType="Argument">
                    <stringProp name="Argument.name">runId</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="prometheusURL" elementType="Argument">
                    <stringProp name="Argument.name">prometheusURL</stringProp>
                    <stringProp name="Argument.value">http://prometheus-server/api/v1/write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="samplersRegExp" elementType="Argument">
                    <stringProp name="Argument.name">samplersRegExp</stringProp>
                    <stringProp name="Argument.value">.*</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sloLevels" elementType="Argument">
                    <stringProp name="Argument.name">sloLevels</stringProp>
                    <stringProp name="Argument.value">0.1;0.2;0.3;1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.github.kolesnikovm.PrometheusPusher</stringProp>
            </BackendListener>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP POST Request">
              <stringProp name="HTTPSampler.domain">httpbin.playground.svc.cluster.local</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.path">/post</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;random1kb&quot;:&quot;wvwnvwvlcmsamzvywrksgrhzzbxqkcdzqbsvgibxsmcvbyifotxuzicbsrwcaxffolgpvzheostbsstbsfbiwuflnnibizxtuygnlycomqdgthwcxeygayyfvnpipehfmowqaxsedgncvolqdtdibppfsojhfpzeifodevosihcmisfxzvoxyzmeoixdoefhabhrumgwjkzvidtznurcrzumwhaxspjogwagvpkzpcfewdoarjtvesxqktoxlgakoujrtokksouylmmugbkliuszothqaogtpiqdtykrkzwsvrsuyalkikkhwlaogfnngbxyoxbtfrygeeqgbydvsbrntinbetdlshyefpqxzbbyebodygfmboxnvqxafsyojubwaivvfxxcuuipybtyjhrizefavirecmgwfvkknsydrcvpmmldxrnkwnusjjyvhrgfaszaxzjtffouobuhdanjybzqkyzlmufmucizfaxefvxkdgiqzxjgweljsvarpqynixzspooojvipmcfsjavoctdqyeezyaoohfevfyzkvbwqbajsatsdokotsuikeiwirxuzjhrmjsusgddrgtsbdcpgdkriitcaongnbvchjroexfjwqbzygtrlnwbfocsjguahitahhhqltjikobmvizwzrazwskscbyglqlapiycukjjfgxnsomzxupctwazhjqpuvikgwnyuwzkzmhgjpyvnxeejathjjcsqbayhuvgbirvpeszbuzebuvixwpiqeaxohhahxvyrsoiakslrqpctsvbopflpisqjjatwyidnauzdtxhiicszceyhfbecfndxmbxidrcpjpkfgzffytiyulmlkfvapljwukihbcoidkxkuoucuarkflxlemtmkiweuobimhbdpoemhljeffgadmrmytstknvxybxfdkhhqdnsarpdqumigmhuwnoxbffirobylsyqnpryarcpcznxbjgniaqycpghyyfanvhshmjcwqcgpzppoxhh&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </jmeterTestPlan>
  test1.jmx: |
    <?xml version="1.0" encoding="UTF-8"?>
    <jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
      <hashTree>
        <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="My Test Plan">
          <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <boolProp name="TestPlan.functional_mode">false</boolProp>
          <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
        </TestPlan>
        <hashTree>
          <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Virtual Users">
            <intProp name="ThreadGroup.num_threads">4</intProp>
            <intProp name="ThreadGroup.ramp_time">100</intProp>
            <longProp name="ThreadGroup.duration">300</longProp>
            <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
            <boolProp name="ThreadGroup.scheduler">true</boolProp>
            <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
            <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
              <intProp name="LoopController.loops">-1</intProp>
              <boolProp name="LoopController.continue_forever">false</boolProp>
            </elementProp>
          </ThreadGroup>
          <hashTree>
            <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="testName" elementType="Argument">
                    <stringProp name="Argument.name">testName</stringProp>
                    <stringProp name="Argument.value">project</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="runId" elementType="Argument">
                    <stringProp name="Argument.name">runId</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="prometheusURL" elementType="Argument">
                    <stringProp name="Argument.name">prometheusURL</stringProp>
                    <stringProp name="Argument.value">http://prometheus-server/api/v1/write</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="samplersRegExp" elementType="Argument">
                    <stringProp name="Argument.name">samplersRegExp</stringProp>
                    <stringProp name="Argument.value">.*</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sloLevels" elementType="Argument">
                    <stringProp name="Argument.name">sloLevels</stringProp>
                    <stringProp name="Argument.value">0.1;0.2;0.3;1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.github.kolesnikovm.PrometheusPusher</stringProp>
            </BackendListener>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request">
              <stringProp name="HTTPSampler.domain">httpbin.playground.svc.cluster.local</stringProp>
              <stringProp name="HTTPSampler.port">80</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </jmeterTestPlan>
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: jmeterscripts-config
